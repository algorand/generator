#set( $queryType = "$go.queryTypeMapper(${str.capitalize($q.name)})" )
#parse("common_macros.vm")
## initialize hasParams based on the queryParamTypeName macro
#set( $hasParams = false )
#foreach( $param in $q.queryParameters )
#if ( "#queryParamTypeName($param)" != "" )
#set( $hasParams = true )
#break
#end
#end
#set( $returnType = "#returnType($q)" )
#set( $queryArg = "nil" )
package $propFile.query_package;

import (
  "context"
#foreach( $qp in $q.queryParameters)
#if( $qp.algorandFormat == "base64" || "#isBoxNameSpecialCase($queryType, $qp)" == "true" )
  "encoding/base64"
#break
#end
#end
#if( $str.matches($q.path, ".*\{.*}.*") )
  "fmt"
#end
#if ( $queryType == "SendRawTransaction" )
  "strings"
#end
#foreach( $qp in $q.queryParameters)
#if( $qp.algorandFormat == "RFC3339 String" )
  "time"
#break
#end
#end

  "github.com/algorand/go-algorand-sdk/v2/client/v2/common"
#if ( $returnType.contains("model") && $queryType != "GetLedgerStateDelta" && $queryType != "GetLedgerStateDeltaForTransactionGroup" )
  "github.com/algorand/go-algorand-sdk/v2/client/v2/common/models"
#end
#if ( $queryType == "PendingTransactionsByAddress" || $queryType == "PendingTransactionInformationByAddress" || $queryType == "PendingTransactionInformation" || $queryType == "PendingTransactions" || $queryType == "Block" || $queryType == "SuggestedParams" || $queryType == "GetLedgerStateDelta" || $queryType == "GetLedgerStateDeltaForTransactionGroup" )
  "github.com/algorand/go-algorand-sdk/v2/types"
#end
#foreach( $qp in $q.bodyParameters)
#if( $str.matches("#oapiToGo($qp)", "models\..*") && $queryType != "SimulateTransaction" )
  "github.com/algorand/go-algorand-sdk/v2/encoding/msgpack"
#end
#end
)
## build the query Params type
#if( $hasParams )
#set( $paramsType = "${queryType}Params" )

// ${paramsType} contains all of the query parameters for url serialization.
type ${paramsType} struct {
#foreach( $qp in $q.queryParameters)
#set ( $qpName = "#queryParamTypeName($qp, false)" )
#if ( $qpName != "" )

  // $str.formatDoc("$qpName ${str.uncapitalize($qp.doc)}", "  // ")
  #if ( $qp.arrayType == "string" )
    $qpName []string `url:"$qp.propertyName,omitempty,comma"`
  #else
    $qpName #oapiToGo($qp, false) `url:"$qp.propertyName,omitempty"`
  #end
#end
#end
}
#end

// $str.formatDoc("$queryType ${str.uncapitalize($q.description)}", "// ")
type $queryType struct {
  c *Client


#foreach( $p in $q.pathParameters )
  #pathParamToArgDef($p)

#end
#foreach( $p in $q.bodyParameters)
  #bodyParamToArgDef($p)
 
#end
#if( $hasParams )
#set( $queryArg = "s.p" )

  p $paramsType
#end
}
#foreach( $qp in $q.queryParameters)
#set ( $qpFieldName = "#queryParamTypeName($qp, false)" )
#set ( $qpName = "#queryParamTypeName($qp, true)" )
#if ( $qpName != "" && $qpName != "Format")## No setter for Format

## Special handling for date fields.
#if( $qp.algorandFormat == "RFC3339 String" )
// $str.formatDoc("${qpName}String ${str.uncapitalize($qp.doc)}", "// ")
func (s *$queryType) ${qpName}String($qpName #oapiToGo($qp, false)) *$queryType {
  s.p.$qpFieldName = $qpName

  return s
}

// $str.formatDoc("$qpName ${str.uncapitalize($qp.doc)}", "// ")
func (s *$queryType) ${qpName}($qpName time.Time) *$queryType {
  ${qpName}Str := ${qpName}.Format(time.RFC3339)

  return s.${qpName}String(${qpName}Str)
}
#else
// $str.formatDoc("$qpName ${str.uncapitalize($qp.doc)}", "// ")
func (s *$queryType) ${qpName}($qpName #queryParamType($qp, true)) *$queryType {
#if ( "#isBoxNameSpecialCase($queryType, $qp)" == "true" )
  s.p.$qpFieldName = "b64:" + base64.StdEncoding.EncodeToString($qpName)
#elseif( $qp.algorandFormat == "base64" )
  s.p.$qpFieldName = base64.StdEncoding.EncodeToString($qpName)
#elseif ( $qp.type == "integer" || $qp.type == "string" || $qp.type == "boolean" || $qp.arrayType )
  s.p.$qpFieldName = $qpName
#else
UNHANDLED TYPE
- ref: $!qp.refType
- type: $!qp.type
- array type: $!qp.arrayType
- algorand format: $!qp.algorandFormat
- format: $!qp.format
##$unknown.type ## force a template failure with an unknown type
#end

  return s
}
#end
#end
#end

// Do performs the HTTP request
## Do function -- Build up path with fmt.Sprintf if there are path parameters.
#set( $processedPath = """${q.path}""" )
#if( $str.matches($q.path, ".*\{.*}.*") )
#set( $processedPath = "fmt.Sprintf(""" )
#set( $argList = ", common.EscapeParams(" )
#set( $sep = "" )
#foreach( $part in $q.pathParts )
#if ( $part.matches("\{.*}") )
#set( $processedPath = "${processedPath}/%s" )
#set( $argList = "${argList}${sep}s.${str.kebabToCamel($str.unwrap($part))}" )
#set( $sep = ", " )
#else
#set( $processedPath = "${processedPath}/$part" )
#end
#end
#set( $processedPath = "${processedPath}""$argList)...)" )
#end
## Return types are not consistent so manually add in the inconsistent functions...
#if( $queryType == "PendingTransactionsByAddress" )
func (s *PendingTransactionsByAddress) Do(ctx context.Context, headers ...*common.Header) (total uint64, topTransactions []types.SignedTxn, err error) {
  s.p.Format = "msgpack"
  response := models.PendingTransactionsResponse{}
  err = s.c.getMsgpack(ctx, &response, fmt.Sprintf("/v2/accounts/%s/transactions/pending", s.address), s.p, headers)
  total = response.TotalTransactions
  topTransactions = response.TopTransactions
  return
}
#elseif( $queryType == "PendingTransactionInformation" )
func (s *PendingTransactionInformation) Do(ctx context.Context, headers ...*common.Header) (response models.PendingTransactionInfoResponse, stxn types.SignedTxn, err error) {
  s.p.Format = "msgpack"
  err = s.c.getMsgpack(ctx, &response, fmt.Sprintf("/v2/transactions/pending/%s", s.txid), s.p, headers)
  stxn = response.Transaction
  return
}
#elseif( $queryType == "PendingTransactions" )
func (s *PendingTransactions) Do(ctx context.Context, headers ...*common.Header) (total uint64, topTransactions []types.SignedTxn, err error) {
  s.p.Format = "msgpack"
  response := models.PendingTransactionsResponse{}
  err = s.c.getMsgpack(ctx, &response, "/v2/transactions/pending", s.p, headers)
  total = response.TotalTransactions
  topTransactions = response.TopTransactions
  return
}
#elseif( $queryType == "LookupAccountByID" )
func (s *LookupAccountByID) Do(ctx context.Context, headers ...*common.Header) (validRound uint64, result models.Account, err error) {
  response := models.AccountResponse{}
  err = s.c.get(ctx, &response, fmt.Sprintf("/v2/accounts/%s", s.accountId), s.p, headers)
  validRound = response.CurrentRound
  result = response.Account
  return
}
#elseif( $queryType == "LookupAssetByID" )
func (s *LookupAssetByID) Do(ctx context.Context, headers ...*common.Header) (validRound uint64, result models.Asset, err error) {
  response := models.AssetResponse{}
  err = s.c.get(ctx, &response, fmt.Sprintf("/v2/assets/%d", s.assetId), s.p, headers)
  validRound = response.CurrentRound
  result = response.Asset
  return
}
#elseif( $propFile.query_package == "algod" && $queryType == "Block" )
func (s *Block) Do(ctx context.Context, headers ...*common.Header) (result types.Block, err error) {
  var response models.BlockResponse

  s.p.Format = "msgpack"
  err = s.c.getMsgpack(ctx, &response, fmt.Sprintf("/v2/blocks/%d", s.round), s.p, headers)
  if err != nil {
    return
  }

  result = response.Block
  return
}
#elseif( $propFile.query_package == "algod" && $queryType == "HealthCheck" )
func (s *HealthCheck) Do(ctx context.Context, headers ...*common.Header) error {
  return s.c.get(ctx, nil, "/health", nil, headers)
}
#elseif( $queryType == "SendRawTransaction" )
func (s *SendRawTransaction) Do(ctx context.Context, headers ...*common.Header) (txid string, err error) {
  var response models.PostTransactionsResponse
  // Set default Content-Type, if the user didn't specify it.
  addContentType := true
  for _, header := range headers {
    if strings.ToLower(header.Key) == "content-type" {
      addContentType = false
      break
    }
  }
  if addContentType {
    headers = append(headers, &common.Header{Key: "Content-Type", Value: "application/x-binary"})
  }
  err = s.c.post(ctx, &response, "/v2/transactions", nil, headers, s.rawtxn)
  txid = response.Txid
  return
}
#elseif( $queryType == "SuggestedParams" )
func (s *SuggestedParams) Do(ctx context.Context, headers ...*common.Header) (params types.SuggestedParams, err error) {
  var response models.TransactionParametersResponse
  err = s.c.get(ctx, &response, "/v2/transactions/params", nil, headers)
  params = types.SuggestedParams{
    Fee:              types.MicroAlgos(response.Fee),
    GenesisID:        response.GenesisId,
    GenesisHash:      response.GenesisHash,
    FirstRoundValid:  types.Round(response.LastRound),
    LastRoundValid:   types.Round(response.LastRound + 1000),
    ConsensusVersion: response.ConsensusVersion,
    MinFee:           response.MinFee,
  }
  return
}
#elseif( $queryType == "TealCompile" )## TODO: "post" can be generated, there is nothing special here.
func (s *TealCompile) Do(ctx context.Context, headers ...*common.Header) (response models.CompileResponse, err error) {
  err = s.c.post(ctx, &response, "/v2/teal/compile", s.p, headers, s.source)
  return
}
#elseif( $queryType == "TealDryrun" )## TODO: "post" can be generated, there is nothing special here.
func (s *TealDryrun) Do(ctx context.Context, headers ...*common.Header) (response models.DryrunResponse, err error) {
  err = s.c.post(ctx, &response, "/v2/teal/dryrun", nil, headers, msgpack.Encode(&s.request))
  return
}
#elseif( $queryType == "TealDisassemble" )## TODO: "post" can be generated, there is nothing special here.
func (s *TealDisassemble) Do(ctx context.Context, headers ...*common.Header) (response models.DisassembleResponse, err error) {
  err = s.c.post(ctx, &response, "/v2/teal/disassemble", nil, headers, s.source)
  return
}
#elseif( $queryType == "UnsetSyncRound" )## TODO: "delete" can be generated, there is nothing special here.
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response $returnType, err error) {
  err = s.c.delete(ctx, &response, $processedPath, nil, headers)
  return
}
#elseif( $queryType == "SetSyncRound" )## TODO: "post" can be generated, there is nothing special here.
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response $returnType, err error) {
  err = s.c.post(ctx, &response, $processedPath, nil, headers, nil)
  return
}
#elseif( $queryType == "GetLedgerStateDelta" )
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response types.LedgerStateDelta, err error) {
  err = s.c.get(ctx, &response, $processedPath, $queryArg, headers)
  return
}
#elseif( $queryType == "GetLedgerStateDeltaForTransactionGroup" )
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response types.LedgerStateDelta, err error) {
  err = s.c.get(ctx, &response, $processedPath, $queryArg, headers)
  return
}
#elseif( $queryType == "SetBlockTimeStampOffset" )## TODO: "post" can be generated, there is nothing special here.
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response $returnType, err error) {
  err = s.c.post(ctx, &response, $processedPath, nil, headers, nil)
  return
}
#elseif( $queryType == "SimulateTransaction" )
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response $returnType, err error) {
  err = s.c.post(ctx, &response, $processedPath, s.p, headers, s.request)
  return
}
#else## finally... machine generate the rest
func (s *${queryType}) Do(ctx context.Context, headers ...*common.Header) (response $returnType, err error) {
  err = s.c.get(ctx, &response, $processedPath, $queryArg, headers)
  return
}
#end
