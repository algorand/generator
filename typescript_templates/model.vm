## Map generated name from spec to hand written name
#macro ( paramName $param )
$str.kebabToCamel($param.propertyName.replaceAll("_", "-"))##
#end
## Converts a parameter type into the SDK specific type.
#macro ( toSdkType $className $param $isArgType )
#set( $d = "$" )
#set( $e = "!" )
#set( $type_override_variable = "${d}${e}propFile.type_override_${className}_#paramName(${param})" )
#set( $type_override = "#evaluate($type_override_variable)" )
#if ( $param.algorandFormat == "SignedTransaction" )
EncodedSignedTransaction##
#elseif ( $param.algorandFormat == "Address" ) ## No special handling for Address in go SDK
string##
#elseif ( $param.algorandFormat == "BlockHeader" )
BlockHeader##
#elseif ( $type_override == "bigint" || ( $param.algorandFormat == "uint64" && $type_override.length() == 0 ) )
#if ( $isArgType )
(number | bigint)##
#else
bigint##
#end
#elseif ( $param.type == "object" )
Record<string, any>##
#elseif ( $type_override == "number" || ( ( $param.type == "integer" || $param.arrayType == "integer" ) && $type_override.length() == 0 ) )
#if ( $isArgType )
(number | bigint)##
#else
number##
#end
#elseif ( $param.type == "boolean" )
boolean##
#elseif( $param.type == "address" )
string##
#elseif( $param.type == "binary" )
Uint8Array##
#elseif($param.arrayType && $param.format == "byte")
Uint8Array##
#elseif( $param.type == "string" && $param.format == "byte" )
#if ( $isArgType )
string | Uint8Array##
#else
Uint8Array##
#end
#elseif( $param.type == "string" || $param.arrayType == "string" )
string##
#elseif( $param.arrayType )
${param.arrayType}##
#elseif( $param.refType ) ## This is second because the old code avoids typedef of references
${param.refType}##
#else
UNHANDLED TYPE
- ref: $!param.refType
- type: $!param.type
- array type: $!param.arrayType
- algorand format: $!param.algorandFormat
- format: $!param.format
$unknown.type ## force a template failure with an unknown type
#end
#if ($param.arrayType && $param.arrayType != "")[]#end## Add array postfix to arrays...
#end
## Check if there's a class associated with this type
#macro ( isClassType $param )
#if ( $param.algorandFormat == "SignedTransaction" )
false##
#elseif ( $param.algorandFormat == "Address" )
false##
#elseif ( $param.algorandFormat == "BlockHeader" )
false##
#elseif ( $param.algorandFormat == "uint64" )
false##
#elseif ( $param.type == "object" )
false##
#elseif ( $param.type == "integer" || $param.arrayType == "integer" )
false##
#elseif ( $param.type == "boolean" )
false##
#elseif( $param.type == "address" )
false##
#elseif( $param.type == "binary" )
false##
#elseif($param.arrayType && $param.format == "byte")
false##
#elseif( $param.type == "string" && $param.format == "byte" )
false##
#elseif( $param.type == "string" || $param.arrayType == "string" )
false##
#else
true##
#end
#end
## Create an expression to assign a field in a constructor
#macro ( constructorAssignType $className $prop )
#set( $argType = "#toSdkType($className, $prop, true)" )
#set( $fieldType = "#toSdkType($className, $prop, false)" )
#set( $name = "#paramName($prop)" )
#if ( $argType == $fieldType )
$name##
#elseif ( $argType == "string | Uint8Array" && $fieldType == "Uint8Array" )
typeof $name === 'string' ? base64ToBytes($name) : $name##
#elseif ( $argType == "(number | bigint)" && $fieldType == "bigint" )
#if ( $prop.required )
ensureBigInt($name)##
#else
typeof $name === 'undefined' ? undefined : ensureBigInt($name)##
#end
#elseif ( $argType == "(number | bigint)[]" && $fieldType == "bigint[]" )
#if ( $prop.required )
${name}.map(ensureBigInt)##
#else
typeof ${name} === 'undefined' ? undefined : ${name}.map(ensureBigInt)##
#end
#elseif ( $argType == "(number | bigint)" && $fieldType == "number" )
#if ( $prop.required )
ensureSafeInteger($name)##
#else
typeof $name === 'undefined' ? undefined : ensureSafeInteger($name)##
#end
#elseif ( $argType == "(number | bigint)[]" && $fieldType == "number[]" )
#if ( $prop.required )
${name}.map(ensureSafeInteger)##
#else
typeof ${name} === 'undefined' ? undefined : ${name}.map(ensureSafeInteger)##
#end
#else
UNHANDLED CONSTRUCTOR TYPE CONVERSION
- property: $prop
- propertyName: $name
- argType: $argType
- fieldType type: $fieldType
$unknown.type ## force a template failure with an unknown type
#end
#end
## Create an expression to assign a field in the from_obj_for_encoding function
#macro ( fromObjForEncodingAssignType $value $prop )
#if ( "#isClassType($prop)" == "false" )
$value##
#elseif ( $prop.arrayType )
#set ( $assignment = "${value}.map(${prop.arrayType}.from_obj_for_encoding)" )
#if ($prop.required)
$assignment##
#else
typeof $value !== 'undefined' ? $assignment : undefined##
#end
#else
#set ( $assignment = "${prop.refType}.from_obj_for_encoding($value)" )
#if ($prop.required)
$assignment##
#else
typeof $value !== 'undefined' ? $assignment : undefined##
#end
#end
#end
#macro ( questionMarkIfOptional $param )
#if ( ! $param.required )
?##
#end
#end
#set( $new = "
" )
#set( $object_gt = $propFile.use_object_params_if_greater_than )
#set( $Integer = 0 )
/**
 * NOTICE: This file was generated. Editing this file manually is not recommended.
 */

/* eslint-disable no-use-before-define */
import { ensureBigInt, ensureSafeInteger } from '../../../../utils/utils.js';
import { base64ToBytes } from '../../../../encoding/binarydata.js';
#if ( $propFile.indexer == "false" )
import BlockHeader from '../../../../types/blockHeader.js';
import { EncodedSignedTransaction } from '../../../../types/transactions/encoded.js';
#end
import BaseModel from '../../basemodel.js';

#foreach( $modelEntry in $models.entrySet() )
#set( $def = $modelEntry.key )
#set( $props = $def.propertiesSortedByRequired )
#set( $d = "$" )
#set( $e = "!" )
#set( $override_variable_name = "${d}${e}propFile.override_${def.name}_order" )
#set( $preferred_order_str = "#evaluate($override_variable_name)" )
#if ( $preferred_order_str.length() > 0 )
#set( $preferred_order = $preferred_order_str.split(",") )
#set( $props = $order.propertiesWithOrdering($props, $preferred_order) )
#end
#set( $use_object_params = $props.size() > $Integer.parseInt($object_gt) )
#if ($def.doc)
/**
 * $str.formatDoc($def.doc, " * ")
 */
#end
export class $def.name extends BaseModel {
#foreach( $prop in $props )
#if ( !$prop.doc.isEmpty() )
  /**
   * $str.formatDoc($prop.doc, "   * ")
   */
#end
  public #paramName($prop)#questionMarkIfOptional($prop): #toSdkType($def.name, $prop, false);

#end
  /**
   * Creates a new `$def.name` object.
#foreach( $prop in $props )
   * @param #paramName($prop) - $str.formatDoc($prop.doc, "   * ")
#end
   */
#if ($use_object_params)
  constructor({
#else
  constructor(
#end
#foreach( $prop in $props )
#if ($use_object_params)
    #paramName($prop),
#else
    #paramName($prop)#questionMarkIfOptional($prop): #toSdkType($def.name, $prop, true),
#end
#end
#if ($use_object_params)
  }: {
#foreach ( $prop in $props )
    #paramName($prop)#questionMarkIfOptional($prop): #toSdkType($def.name, $prop, true)

#end
  }) {
#else
  ) {
#end
    super();
#foreach( $prop in $props )
#set( $var = "#paramName($prop)" )
    this.$var = #constructorAssignType($def.name, $prop);
#end

    this.attribute_map = {
#foreach( $prop in $props )
      #paramName($prop): '$prop.propertyName',
#end
    }
  }

  // eslint-disable-next-line camelcase
  static from_obj_for_encoding(data: Record<string, any>): $def.name {
    /* eslint-disable dot-notation */
#set ( $d = "$" )## Create a variable in order to insert a $ into the code
#foreach( $prop in $props )
#if ($prop.required)
#if ($prop.arrayType)
    if (!Array.isArray(data['$prop.propertyName']))
      throw new Error(`Response is missing required array field '${prop.propertyName}': ${d}{data}`);
#else
    if (typeof data['$prop.propertyName'] === 'undefined')
      throw new Error(`Response is missing required field '${prop.propertyName}': ${d}{data}`);
#end
#end
#end
#if ($use_object_params)
    return new ${def.name}({
#foreach( $prop in $props )
      #paramName($prop): #fromObjForEncodingAssignType("data['$prop.propertyName']", $prop),
#end
    });
#else
    return new ${def.name}(
#foreach( $prop in $props )
      #fromObjForEncodingAssignType("data['$prop.propertyName']", $prop),
#end
    );
#end
    /* eslint-enable dot-notation */
  }
}

#end
